<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tetris - Return to Monke
</name>
</assembly>
<members>
<member name="T:Tetris___Return_to_Monke.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tetris___Return_to_Monke.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tetris___Return_to_Monke.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Tetris___Return_to_Monke.frmReturnToMonke">
 <summary>
 The main form, housing the start screen and links to the other forms
 </summary>
</member>
<member name="T:Tetris___Return_to_Monke.frmGameWindow">
 <summary>
 The game window
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.frmGameWindow.tmrTick_Tick(System.Object,System.EventArgs)">
 <summary>
 A global game timer, running periodic commands every tick
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.frmGameWindow.TranslateDown">
 <summary>
 Translates all groups on the board down
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.frmGameWindow.frmGameWindow_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
 <summary>
 Keydown detection
 </summary>
</member>
<member name="T:Tetris___Return_to_Monke.Pieces">
 <summary>
 I was going to use an enum for this but I didn't know they dont support classes or non-elementary data types.
 Codes for all of the pieces and the formation of those pieces
 </summary>
 TODO: UPDATE THIS TO USE FILES FOR STORAGE AS OPPOSED TO HARD CODING
 MAYBE TODO: Fix implicit declarations. Not a problem, but possibly something that I could fix.
</member>
<member name="M:Tetris___Return_to_Monke.Pieces.GetRandomPiece">
 <summary>
 Returns a random piece
 </summary>
 <returns></returns>
</member>
<member name="T:Tetris___Return_to_Monke.TetrisCell">
 <summary>
 Tetris 
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCell.ContainsCube">
 <summary>
 Checks if this cell contains a TetrisCube or not
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCell.GetCube">
 <summary>
 Gets the activeCube of this cell
 </summary>
</member>
<member name="T:Tetris___Return_to_Monke.GameBoard">
 <summary>
 GameBoard for the TetrisGroups
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.GameBoard.GeneratePicBoard(Tetris___Return_to_Monke.frmGameWindow@)">
 <summary>
 Generates an array of picture boxes
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.GameBoard.GetCellPosition(Tetris___Return_to_Monke.TetrisCube)">
 <summary>
 Gets the (x, y) of a cell
 </summary>
 <param name="cell"></param>
 <returns>Pair of coordinates from GameBoard, returned as a KeyValuePair</returns>
</member>
<member name="M:Tetris___Return_to_Monke.GameBoard.AssignCubeToCell(System.Collections.Generic.KeyValuePair{System.Int32,System.Int32},Tetris___Return_to_Monke.TetrisCube)">
 <summary>
 Assigns a particular TetrisCube to a new Cell
 </summary>
 <param name="position">The position of the cell, as (x, y)</param>
 <param name="cube">The TetrisCube instance</param>
</member>
<member name="M:Tetris___Return_to_Monke.GameBoard.GetCubeAtCoordinate(System.Collections.Generic.KeyValuePair{System.Int32,System.Int32})">
 <summary>
 Gets the cube at a particular cell
 </summary>
 <param name="position">The position of the cell</param>
 <returns></returns>
</member>
<member name="M:Tetris___Return_to_Monke.GameBoard.GenerateCubeId">
 <summary>
 Generates a random cubeID
 </summary>
</member>
<member name="T:Tetris___Return_to_Monke.TetrisCube">
 <summary>
 A class for displaying and keeping track of the different cubes on the screen
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.#ctor">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.Translate(System.Int32,System.Int32)">
 <summary>
 Translates the Cube to a different cell if possible
 </summary>
 <param name="x">Amount to translate "left" value by</param>
 <param name="y">Amount to translate "top" value by</param>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.Lock">
 <summary>
 Locks the cube 
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.IsLocked">
 <summary>
 Returns the locked status of this cube
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.ShouldLock(System.Collections.Generic.KeyValuePair{System.Int32,System.Int32})">
 <summary>
 Checks if the TetrisCube should lock or not
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisCube.GetLocation">
 <summary>
 Gets the location of this particular cube
 </summary>
</member>
<member name="T:Tetris___Return_to_Monke.TetrisGroup">
 <summary>
 Creates and keeps track of groups of TetrisCubes
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisGroup.#ctor(System.Collections.Generic.List{Tetris___Return_to_Monke.TetrisCube})">
 <summary>
 Constructor
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisGroup.CreateTetrisGroup(Tetris___Return_to_Monke.TetrisCube[])">
 <summary>
 Creates a TetrisGroup, doing all of the hard work
 </summary>
 <param name="cubes">The individual cubes for the TetrisGroup</param>
 <returns>The TetrisGroup</returns>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisGroup.CreateTetrisGroup(System.Collections.Generic.List{Tetris___Return_to_Monke.TetrisCube})">
 <summary>
 Creates a TetrisGroup, doing all of the hard work
 </summary>
 <param name="tlist">The individual cubes for the TetrisGroup</param>
 <returns>The TetrisGroup</returns>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisGroup.IsLocked">
 <returns>locked</returns>
</member>
<member name="T:Tetris___Return_to_Monke.TetrisRow">
 <summary>
 A collection of TetrisCells
 </summary>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisRow.GenerateCells(System.Int32,System.Int32)">
 <summary>
 A method for generating a row of tetris cells
 </summary>
 <param name="rowSize">The count of tetris cells. Basically always 15</param>
 <param name="rowNumber">The position of the row, particularly as a 1d count</param>
</member>
<member name="M:Tetris___Return_to_Monke.TetrisRow.GetCellAtPosition(System.Int32)">
 <summary>
 Gets a cell at a certain position
 </summary>
 <param name="position">The position in the array</param>
 <returns>The cell at a position in the collection</returns>
</member>
</members>
</doc>
